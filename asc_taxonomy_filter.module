<?php

/**
 * @file
 * asc_taxonomy_filter.module
 */

/**
 * Implements hook_block_info()
 */

function asc_taxonomy_filter_block_info() {

  $blocks['active_filters'] = array(
    'info'        => t('Active Filters'),
    'weight'      => '-10',
    'region'      => 'content',
    'status'      => TRUE,
    'visibility'  =>  '1',
  );

  //Set block info for each term.
  $vocabularies = taxonomy_vocabulary_load_multiple(FALSE);
  foreach ($vocabularies as $vocab) {
    $blocks[$vocab->machine_name] = array(
      'info'        => t('Term Filter: ' . $vocab->name),
      'weight'      => '0',
      'region'      => 'sidebar',
      'status'      => TRUE,
      'visibility'  => '1',
    );
  }

  return $blocks;
}

/**
 * Implements hook_block_view( )
 */

function asc_taxonomy_filter_block_view($delta = '') {

  $url_array = explode('/', drupal_get_path_alias());
  $section = $url_array[0];

  drupal_add_css(drupal_get_path('module', 'asc_taxonomy_filter') . '/asc_taxonomy_filter.css', array('group' => CSS_DEFAULT, 'type' => 'file'));

  switch($delta) {
    case 'active_filters':
      $block['subject'] = '';

      $term_list = array();
      $term_list['title'] = '';
      $term_list['type'] = 'ul';
      $term_list['attributes'] = array();
      $term_list['items'] = asc_get_active_term_names();
      $block['content'] = theme_item_list($term_list);
      break;

    default:
      $vocab = taxonomy_vocabulary_machine_name_load($delta);
      $block['subject'] = 'Filter by: ' . $vocab->name;


      $filters = array();
      $filters['title'] = '';
      $filters['type'] = 'ul';
      $filters['attributes'] = array();
      $filters['items'] = build_filter_list($vocab);
      $block['content'] = theme_item_list($filters);
  }

  return $block;

}

function construct_query_params() {
  $string = '?';
  foreach ($_GET as $get => $value) {
    if ($get != 'q' && $get != $vocabulary) {
      $string .= $get . "=" . $value . "&";
    }
  }
  return $string;
}

function build_filter_list($vocab) {

  $section = get_current_section();

  //Get URL without /1,2,3

  $other_params = construct_query_params();

  //Get all terms for this vid.
  $terms = taxonomy_get_tree($vocab->vid, 0, NULL, TRUE);

  //Add first list item.
  $list[] = '<a href="/'. $section . 'all' . $other_params . '">All</a>';

  //List of current terms to check for active.
  $active_term_list = asc_get_active_terms();

  $qs = (implode(',',$active_term_list)) . (count($active_term_list) > 0 ? ',' : '');

  $term_to_append = (isset($term) ? ',' . $term->tid : '');

  //Build an array of parents of active terms.
  $active_parents = array();
  foreach ($active_term_list as $active_term_id) {
    foreach (taxonomy_get_parents($active_term_id) as $parent){
        $active_parents[] = $parent->tid;
    }
  }


  foreach ($terms as $term) {
    //Apply active class if this term is active in URL.
    (in_array($term->tid, $active_term_list)) ? $classes = "active" : $classes = "";

    // Check to see if current term, parents or siblings are active. Otherwise, don't render unless top level.
    if (in_array($term->parents[0], $active_term_list) ||
                is_parent_active($active_parents, $active_term_list)) {
      $list[$term->parents[0]]["children"][] = '<a class="' . $classes . '" href="/' . $section .
          $term->tid . ',' . $other_params . '">' . $term->name . '</a>';
    }

    // Display all top level terms.
    elseif ($term->parents[0] == 0) {
      $list[$term->tid][] = '<a class="' . $classes . '" href="/' . $section . '/' . $term->tid . ',' . $other_params . '">' . $term->name . '</a>';
    }
  }
  return($list);
}

/**
 * is_parent_active
 *   In php 5.4.2 this can be replaced with a straight in_array()
 * @return bool
 *   Returns true if any elements from active parents are in active term list.
 */
function is_parent_active($active_parents, $active_term_list) {
  foreach ($active_parents as $active_parent) {
    if (in_array($active_parent, $active_term_list)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Returns array of current filter ids.
 * @return array
 *   of current filter ids.
 */
function asc_get_active_terms() {
  $terms = explode('/', request_path());
  $ids = end($terms);
  $term_list = array();
  //ids contains one integer, or a list of comma separated integers
  if ((strval(intval($ids)) == strval($ids)) || strpos($ids, ',')) {
    $term_list = explode(',', end($terms));
  }
  return $term_list;
}

/**
 * Returns array of current filter names.
 */

function asc_get_active_term_names() {
  $term_names = array();
  $term_ids = asc_get_active_terms();
  foreach($term_ids as $term_id) {
    $term = taxonomy_term_load($term_id);
    $term_names[] = $term->name;
  }
  return $term_names;
}

function current_filter_list() {
  $url_array = explode('/', drupal_get_path_alias());
  $terms = array_pop($url_array);
  $filter = array_pop($url_array);
  if ($filter == 'filter') {
    return ',' . $terms;
  } else {
    return '/filter/' . $terms;
  }

}

function get_current_section() {
  $url_array = explode('/', drupal_get_path_alias());
  $terms = array_pop($url_array);
  $filter = array_pop($url_array);
  if ($filter == 'filter') {
    return drupal_get_path_alias() . ',';
  } else {
    return drupal_get_path_alias() . '/filter/';
  }
}

function asc_taxonomy_filter_preprocess_calendar_datebox(&$vars) {
  $date = $vars['date'];
  $view = $vars['view'];
  $vars['day'] = intval(substr($date, 8, 2));
  $force_view_url = !empty($view->date_info->block) ? TRUE : FALSE;
  $month_path = calendar_granularity_path($view, 'month');
  $year_path = calendar_granularity_path($view, 'year');
  $day_path = calendar_granularity_path($view, 'day');
  $vars['url'] = str_replace(array($month_path, $year_path), $day_path, date_pager_url($view, NULL, $date, $force_view_url)) . current_filter_list();
  $vars['link'] = !empty($day_path) ? l($vars['day'], $vars['url']) : $vars['day'];
  $vars['granularity'] = $view->date_info->granularity;
  $vars['mini'] = !empty($view->date_info->mini);
  if ($vars['mini']) {
    if (!empty($vars['selected'])) {
      $vars['class'] = 'mini-day-on';
    }
    else {
      $vars['class'] = 'mini-day-off';
    }
  }
  else {
    $vars['class'] = 'day';
  }
}
